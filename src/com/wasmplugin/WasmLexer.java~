/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.wasmplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static com.wasmplugin.psi.WasmTypes.*;
import static com.intellij.psi.TokenType.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Wasm.flex</tt>
 */
class WasmLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\4\1\33\1\27\2\4\1\33\22\4\1\32\1\3\1\10\1\3\1\25\2\3\1\7\1\30\1\31\1\3"+
    "\1\11\1\0\1\11\1\15\1\66\1\12\1\61\1\52\1\51\1\54\1\1\1\53\1\1\1\60\1\1\1"+
    "\23\1\26\1\3\1\55\3\3\4\14\1\24\1\14\11\3\1\16\12\3\1\0\1\5\1\0\1\3\1\2\1"+
    "\3\1\22\1\47\1\42\1\36\1\41\1\21\1\50\1\57\1\17\1\3\1\56\1\40\1\34\1\20\1"+
    "\35\1\43\1\65\1\44\1\45\1\6\1\37\1\64\1\63\1\13\1\46\1\62\1\0\1\3\1\0\1\3"+
    "\201\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\3\1\1\2\1\1\1\3\6\1"+
    "\1\4\1\5\1\6\14\1\1\7\1\1\1\0\1\10"+
    "\10\0\1\11\5\0\1\12\5\0\1\13\10\0\1\14"+
    "\12\0\1\15\5\0\1\16\1\0\1\17\3\0\1\20"+
    "\17\0\1\21\1\22\1\0\1\23\1\0\2\10\7\0"+
    "\1\2\1\24\1\10\1\0\1\25\1\26\1\10\1\27"+
    "\1\0\1\30\2\0\1\31\1\32\1\33\1\0\1\34"+
    "\1\0\1\35\2\0\1\36\1\37\1\0\1\40\1\41"+
    "\2\0\1\42\13\0\1\43\2\0\1\44\1\45\3\0"+
    "\1\46\12\0\1\47\2\0\1\50\15\0\1\51\1\52"+
    "\1\10\3\0\1\53\7\0\1\54\1\0\1\55\1\0"+
    "\1\56\1\57\1\60\1\61\1\0\1\62\1\63\2\0"+
    "\1\64\1\65\1\66\3\0\1\67\14\0\1\70\3\0"+
    "\1\71\1\72\1\0\1\73\1\74\2\0\1\75\1\0"+
    "\1\76\1\10\4\0\1\77\1\0\1\100\3\0\1\101"+
    "\1\102\5\0\1\103\3\0\1\104\2\0\1\105\4\0"+
    "\1\106\1\107\1\0\1\110\1\111\3\0\1\112\1\113"+
    "\1\114\1\0\1\115\7\0\1\116\4\0\1\117\1\120"+
    "\1\121\7\0\1\122\3\0\1\123\1\0\1\124\1\0"+
    "\1\125\1\0\1\126\3\0\1\127\1\0\1\130\7\0"+
    "\1\10\1\131\1\132\4\0\1\133\1\134\15\0\1\135"+
    "\1\136\21\0\1\137\1\140\1\141\1\142\13\0\1\143"+
    "\4\0\1\144\4\0\1\145\1\146\11\0\1\147\1\150"+
    "\4\0\1\151\24\0\1\152\4\0\1\153\1\154\7\0"+
    "\1\155\1\156\1\157\1\160\1\161\1\162\1\0\1\163"+
    "\1\164\1\165\10\0\1\166\3\0\1\167\1\170\12\0"+
    "\1\171\1\172\1\173\1\174\1\175\10\0\1\176\1\177"+
    "\1\200\1\201\1\202\1\203\1\204\1\205";

  private static int [] zzUnpackAction() {
    int [] result = new int[514];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\67\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302"+
    "\0\u0339\0\67\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483"+
    "\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\67\0\u0604"+
    "\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc"+
    "\0\334\0\u07f3\0\67\0\u082a\0\u0861\0\u0898\0\u08cf\0\u0906"+
    "\0\67\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87"+
    "\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0294"+
    "\0\u0c3f\0\u02cb\0\u0339\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52"+
    "\0\u0d89\0\u0dc0\0\67\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3"+
    "\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u108b"+
    "\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243"+
    "\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4\0\u13fb"+
    "\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3"+
    "\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6\0\67\0\67\0\u16fd"+
    "\0\67\0\67\0\u1734\0\67\0\u176b\0\67\0\u17a2\0\u17d9"+
    "\0\67\0\67\0\67\0\u1810\0\67\0\u1847\0\67\0\u187e"+
    "\0\u18b5\0\67\0\67\0\u18ec\0\67\0\67\0\u1923\0\u195a"+
    "\0\u1991\0\u19c8\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12"+
    "\0\u1b49\0\u1b80\0\u1bb7\0\u1bee\0\67\0\u1c25\0\u1c5c\0\67"+
    "\0\67\0\u1c93\0\u1cca\0\u1d01\0\67\0\u1d38\0\u1d6f\0\u1da6"+
    "\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\67"+
    "\0\u1f5e\0\u1f95\0\67\0\u1fcc\0\u2003\0\u203a\0\u2071\0\u20a8"+
    "\0\u20df\0\u2116\0\u214d\0\u2184\0\u21bb\0\u21f2\0\u2229\0\u2260"+
    "\0\67\0\67\0\u2297\0\u22ce\0\u2305\0\u233c\0\u2373\0\u23aa"+
    "\0\u23e1\0\u2418\0\u244f\0\u2486\0\u24bd\0\u24f4\0\67\0\u252b"+
    "\0\67\0\u2562\0\67\0\67\0\u2599\0\67\0\u25d0\0\67"+
    "\0\67\0\u2607\0\u263e\0\67\0\67\0\u2675\0\u26ac\0\u26e3"+
    "\0\u271a\0\67\0\u2751\0\u2788\0\u27bf\0\u27f6\0\u282d\0\u2864"+
    "\0\u289b\0\u28d2\0\u2909\0\u2940\0\u2977\0\u29ae\0\67\0\u29e5"+
    "\0\u2a1c\0\u2a53\0\67\0\67\0\u2a8a\0\67\0\67\0\u2ac1"+
    "\0\u2af8\0\67\0\u2b2f\0\u2b66\0\u2b9d\0\u2bd4\0\u2c0b\0\u2c42"+
    "\0\u2c79\0\67\0\u2cb0\0\67\0\u2ce7\0\u2d1e\0\u2d55\0\67"+
    "\0\67\0\u2d8c\0\u2dc3\0\u2dfa\0\u2e31\0\u2e68\0\u2e9f\0\u2ed6"+
    "\0\u2f0d\0\u2f44\0\67\0\u2f7b\0\u2fb2\0\67\0\u2fe9\0\u3020"+
    "\0\u3057\0\u308e\0\67\0\67\0\u30c5\0\67\0\u30fc\0\u3133"+
    "\0\u316a\0\u31a1\0\67\0\67\0\67\0\u31d8\0\67\0\u320f"+
    "\0\u3246\0\u327d\0\u32b4\0\u32eb\0\u3322\0\u3359\0\67\0\u3390"+
    "\0\u33c7\0\u33fe\0\u3435\0\67\0\u346c\0\67\0\u34a3\0\u34da"+
    "\0\u3511\0\u3548\0\u357f\0\u35b6\0\u35ed\0\67\0\u3624\0\u365b"+
    "\0\u3692\0\67\0\u36c9\0\67\0\u3700\0\67\0\u3737\0\67"+
    "\0\u376e\0\u37a5\0\u37dc\0\67\0\u3813\0\u384a\0\u3881\0\u38b8"+
    "\0\u38ef\0\u3926\0\u395d\0\u3994\0\u39cb\0\u3a02\0\67\0\67"+
    "\0\u3a39\0\u3a70\0\u3aa7\0\u3ade\0\67\0\67\0\u3b15\0\u3b4c"+
    "\0\u3b83\0\u3bba\0\u3bf1\0\u3c28\0\u3c5f\0\u3c96\0\u3ccd\0\u3d04"+
    "\0\u3d3b\0\u3d72\0\u3da9\0\67\0\67\0\u3de0\0\u3e17\0\u3e4e"+
    "\0\u3e85\0\u3ebc\0\u3ef3\0\u3f2a\0\u3f61\0\u3f98\0\u3fcf\0\u4006"+
    "\0\u403d\0\u4074\0\u40ab\0\u40e2\0\u4119\0\u4150\0\67\0\67"+
    "\0\67\0\67\0\u4187\0\u41be\0\u41f5\0\u422c\0\u4263\0\u429a"+
    "\0\u42d1\0\u4308\0\u433f\0\u4376\0\u43ad\0\67\0\u43e4\0\u441b"+
    "\0\u4452\0\u4489\0\67\0\u44c0\0\u44f7\0\u452e\0\u4565\0\67"+
    "\0\67\0\u459c\0\u45d3\0\u460a\0\u4641\0\u4678\0\u46af\0\u46e6"+
    "\0\u471d\0\u4754\0\67\0\67\0\u478b\0\u47c2\0\u47f9\0\u4830"+
    "\0\67\0\u4867\0\u489e\0\u48d5\0\u490c\0\u4943\0\u497a\0\u49b1"+
    "\0\u49e8\0\u4a1f\0\u4a56\0\u4a8d\0\u4ac4\0\u4afb\0\u4b32\0\u4b69"+
    "\0\u4ba0\0\u4bd7\0\u4c0e\0\u4c45\0\u4c7c\0\67\0\u4cb3\0\u4cea"+
    "\0\u4d21\0\u4d58\0\67\0\67\0\u4d8f\0\u4dc6\0\u4dfd\0\u4e34"+
    "\0\u4e6b\0\u4ea2\0\u4ed9\0\67\0\67\0\67\0\67\0\67"+
    "\0\67\0\u4f10\0\67\0\67\0\67\0\u4f47\0\u4f7e\0\u4fb5"+
    "\0\u4fec\0\u5023\0\u505a\0\u5091\0\u50c8\0\67\0\u50ff\0\u5136"+
    "\0\u516d\0\67\0\67\0\u51a4\0\u51db\0\u5212\0\u5249\0\u5280"+
    "\0\u52b7\0\u52ee\0\u5325\0\u535c\0\u5393\0\67\0\67\0\67"+
    "\0\67\0\67\0\u53ca\0\u5401\0\u5438\0\u546f\0\u54a6\0\u54dd"+
    "\0\u5514\0\u554b\0\67\0\67\0\67\0\67\0\67\0\67"+
    "\0\67\0\67";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[514];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\4\2\1\4\1\2\1\5\1\6\1\7"+
    "\1\10\1\2\1\11\1\2\1\12\1\13\1\14\1\15"+
    "\2\2\1\16\1\17\1\20\1\21\1\22\2\20\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\2\1\35\1\36\4\3\1\37\2\2\2\3"+
    "\1\2\1\40\3\2\70\0\1\3\1\41\7\0\1\3"+
    "\2\0\1\42\6\0\1\43\14\0\1\43\7\0\4\3"+
    "\3\0\2\3\27\0\1\44\16\0\1\45\2\0\1\46"+
    "\1\0\1\47\10\0\1\50\7\0\4\51\1\0\1\52"+
    "\2\51\1\53\16\51\1\0\3\51\1\0\33\51\1\0"+
    "\1\3\10\0\1\7\4\0\1\54\1\55\30\0\4\3"+
    "\3\0\2\3\6\0\1\3\1\41\7\0\1\3\1\56"+
    "\1\0\1\42\6\0\1\43\14\0\1\43\7\0\4\3"+
    "\3\0\2\3\42\0\1\57\51\0\1\60\1\61\12\0"+
    "\1\62\14\0\1\63\1\0\1\64\35\0\1\65\12\0"+
    "\1\66\3\0\1\67\64\0\1\70\1\71\10\0\1\72"+
    "\1\0\1\73\33\0\1\74\15\0\1\75\1\0\1\76"+
    "\6\0\1\77\20\0\3\100\1\0\3\100\1\0\15\100"+
    "\6\0\33\100\26\0\1\101\66\0\1\102\1\20\1\103"+
    "\1\0\2\20\61\0\1\104\57\0\1\105\2\0\1\106"+
    "\12\0\1\107\1\0\1\110\1\0\1\111\46\0\1\112"+
    "\22\0\1\113\41\0\1\114\2\0\1\115\16\0\1\116"+
    "\2\0\1\117\42\0\1\120\54\0\1\121\26\0\1\122"+
    "\3\0\1\123\40\0\1\124\4\0\1\125\17\0\1\126"+
    "\24\0\1\127\7\0\1\130\13\0\1\131\12\0\1\132"+
    "\2\0\1\133\1\134\47\0\1\135\12\0\1\136\6\0"+
    "\1\137\63\0\1\140\33\0\1\141\30\0\1\142\1\0"+
    "\1\143\15\0\1\144\5\0\1\145\41\0\1\146\3\0"+
    "\1\147\30\0\1\150\31\0\1\151\1\152\71\0\1\153"+
    "\23\0\1\3\10\0\1\3\36\0\4\3\3\0\2\3"+
    "\6\0\1\154\10\0\1\154\11\0\1\43\14\0\1\43"+
    "\7\0\4\154\3\0\2\154\6\0\1\155\7\0\1\156"+
    "\1\155\36\0\4\155\3\0\2\155\54\0\1\157\60\0"+
    "\1\160\64\0\1\161\72\0\1\162\64\0\1\163\26\0"+
    "\1\164\4\0\3\51\1\0\1\164\1\0\1\164\3\0"+
    "\1\51\2\164\1\0\1\164\11\0\1\164\2\0\2\164"+
    "\1\0\1\51\2\0\1\164\1\0\4\164\3\0\2\164"+
    "\25\0\1\60\70\0\1\65\45\0\1\165\10\0\1\165"+
    "\1\0\1\165\4\0\2\165\1\0\1\165\11\0\1\165"+
    "\2\0\2\165\4\0\1\165\1\0\4\165\3\0\2\165"+
    "\51\0\1\166\43\0\1\167\110\0\1\170\75\0\1\171"+
    "\70\0\1\172\32\0\1\173\111\0\1\174\45\0\1\175"+
    "\25\0\1\176\36\0\1\177\103\0\1\200\103\0\1\201"+
    "\70\0\1\202\50\0\1\203\7\0\1\204\56\0\1\205"+
    "\47\0\1\206\114\0\1\207\21\0\27\101\1\20\37\101"+
    "\26\104\1\210\1\104\1\211\36\104\20\0\1\212\61\0"+
    "\1\213\111\0\1\214\36\0\1\215\31\0\1\216\62\0"+
    "\1\217\53\0\1\220\131\0\1\221\10\0\1\222\114\0"+
    "\1\223\67\0\1\224\75\0\1\225\24\0\1\226\106\0"+
    "\1\227\12\0\1\230\4\0\1\231\26\0\1\232\72\0"+
    "\1\233\34\0\1\234\61\0\1\235\71\0\1\236\3\0"+
    "\1\237\103\0\1\240\66\0\1\241\44\0\1\242\46\0"+
    "\1\243\22\0\1\244\105\0\1\245\23\0\1\246\113\0"+
    "\1\247\65\0\1\250\60\0\1\251\37\0\1\252\10\0"+
    "\1\253\14\0\1\254\10\0\1\255\43\0\1\256\12\0"+
    "\1\257\100\0\1\260\25\0\1\261\31\0\1\262\66\0"+
    "\1\263\3\0\1\264\66\0\1\265\57\0\1\266\33\0"+
    "\1\267\66\0\1\270\121\0\1\271\33\0\1\272\3\0"+
    "\1\273\102\0\1\274\45\0\1\154\1\275\7\0\1\154"+
    "\11\0\1\43\14\0\1\43\7\0\4\154\3\0\2\154"+
    "\6\0\1\155\1\156\7\0\1\155\36\0\4\155\3\0"+
    "\2\155\6\0\1\155\10\0\1\155\36\0\4\155\3\0"+
    "\2\155\45\0\1\276\30\0\1\277\104\0\1\300\107\0"+
    "\1\301\45\0\1\302\47\0\1\51\10\0\1\51\1\0"+
    "\1\51\4\0\2\51\1\0\1\51\11\0\1\51\2\0"+
    "\2\51\4\0\1\51\1\0\4\51\3\0\2\51\6\0"+
    "\1\165\1\56\7\0\1\165\1\0\1\165\1\303\1\43"+
    "\2\0\2\165\1\0\1\165\11\0\1\165\2\0\2\165"+
    "\1\43\3\0\1\165\1\0\4\165\3\0\2\165\42\0"+
    "\1\304\54\0\1\305\107\0\1\306\64\0\1\307\61\0"+
    "\1\310\52\0\1\311\115\0\1\312\16\0\31\104\1\20"+
    "\63\104\1\0\40\104\37\0\1\313\64\0\1\314\76\0"+
    "\1\315\23\0\1\316\106\0\1\317\101\0\1\320\74\0"+
    "\1\321\64\0\1\322\64\0\1\323\5\0\1\324\57\0"+
    "\1\325\73\0\1\326\45\0\1\327\103\0\1\330\5\0"+
    "\1\331\62\0\1\332\62\0\1\333\65\0\1\334\73\0"+
    "\1\335\65\0\1\336\73\0\1\337\16\0\1\340\50\0"+
    "\1\341\60\0\1\342\50\0\1\343\106\0\1\344\60\0"+
    "\1\345\71\0\1\346\47\0\1\347\50\0\1\350\123\0"+
    "\1\351\73\0\1\352\66\0\1\353\24\0\1\354\125\0"+
    "\1\355\27\0\1\356\72\0\1\357\122\0\1\360\32\0"+
    "\1\361\10\0\1\362\106\0\1\363\5\0\1\364\70\0"+
    "\1\365\56\0\1\366\5\0\1\367\23\0\1\370\127\0"+
    "\1\371\24\0\1\154\10\0\1\154\36\0\4\154\3\0"+
    "\2\154\46\0\1\372\65\0\1\373\70\0\1\374\25\0"+
    "\1\375\10\0\1\375\1\0\1\375\1\0\1\43\2\0"+
    "\2\375\1\0\1\375\11\0\1\375\2\0\2\375\1\43"+
    "\3\0\1\375\1\0\4\375\3\0\2\375\51\0\1\376"+
    "\34\0\1\377\115\0\1\u0100\71\0\1\u0101\66\0\1\u0102"+
    "\61\0\1\u0103\47\0\1\u0104\106\0\1\u0105\72\0\1\u0106"+
    "\63\0\1\u0107\64\0\1\u0108\5\0\1\u0109\27\0\1\u010a"+
    "\102\0\1\u010b\115\0\1\u010c\6\0\1\u010d\1\u010e\45\0"+
    "\1\u010f\46\0\1\u0110\112\0\1\u0111\24\0\1\u0112\72\0"+
    "\1\u0113\121\0\1\u0114\72\0\1\u0115\55\0\1\u0116\52\0"+
    "\1\u0117\103\0\1\u0118\75\0\1\u0119\30\0\1\u011a\117\0"+
    "\1\u011b\5\0\1\u011c\61\0\1\u011d\34\0\1\u011e\121\0"+
    "\1\u011f\65\0\1\u0120\7\0\1\u0121\60\0\1\u0122\63\0"+
    "\1\u0123\5\0\1\u0124\77\0\1\u0125\32\0\1\u0126\65\0"+
    "\1\u0127\67\0\1\u0128\104\0\1\u0129\7\0\1\u012a\20\0"+
    "\1\u012b\63\0\1\u012b\35\0\1\u012c\33\0\1\u012d\65\0"+
    "\1\375\1\u012e\7\0\1\375\1\0\1\375\1\0\1\43"+
    "\2\0\2\375\1\0\1\375\11\0\1\375\2\0\2\375"+
    "\1\43\3\0\1\375\1\0\4\375\3\0\2\375\13\0"+
    "\1\u012f\73\0\1\u0130\120\0\1\u0131\62\0\1\u0132\45\0"+
    "\1\u0133\107\0\1\u0134\73\0\1\u0135\26\0\1\u0136\121\0"+
    "\1\u0137\67\0\1\u0138\76\0\1\u0139\16\0\1\u013a\137\0"+
    "\1\u013b\30\0\1\u013c\107\0\1\u013d\36\0\1\u013e\77\0"+
    "\1\u013f\113\0\1\u0140\41\0\1\u0141\55\0\1\u0142\66\0"+
    "\1\u0143\100\0\1\u0144\107\0\1\u0145\33\0\1\u0146\131\0"+
    "\1\u0147\6\0\1\u0148\1\u0149\42\0\1\u014a\71\0\1\u014b"+
    "\34\0\1\u014c\127\0\1\u014d\57\0\1\u014e\63\0\1\u014f"+
    "\71\0\1\u0150\45\0\1\u0151\111\0\1\u0152\45\0\1\u0153"+
    "\15\0\1\u0154\5\0\1\u0155\22\0\1\375\10\0\1\375"+
    "\1\0\1\375\4\0\2\375\1\0\1\375\11\0\1\375"+
    "\2\0\2\375\4\0\1\375\1\0\4\375\3\0\2\375"+
    "\6\0\1\u0156\10\0\1\u0156\1\0\1\u0156\4\0\2\u0156"+
    "\1\0\1\u0156\11\0\1\u0156\2\0\2\u0156\4\0\1\u0156"+
    "\1\0\4\u0156\3\0\2\u0156\13\0\1\u0157\101\0\1\u0158"+
    "\107\0\1\u0158\41\0\1\u0159\53\0\1\u015a\63\0\1\u015a"+
    "\57\0\1\u015b\11\0\1\u015c\123\0\1\u015d\5\0\1\u015e"+
    "\23\0\1\u015f\72\0\1\u0160\36\0\1\u0161\2\0\1\u0162"+
    "\20\0\1\u0163\46\0\1\u0164\6\0\1\u0165\1\u0166\25\0"+
    "\1\u0167\54\0\1\u0168\130\0\1\u0169\57\0\1\u016a\71\0"+
    "\1\u016b\74\0\1\u016c\67\0\1\u016d\55\0\1\u016e\61\0"+
    "\1\u016f\71\0\1\u0170\43\0\1\u0171\113\0\1\u0172\61\0"+
    "\1\u0173\104\0\1\u0174\35\0\1\u0175\115\0\1\u0176\1\0"+
    "\1\u0177\101\0\1\u0178\22\0\1\u0179\43\0\1\u017a\1\0"+
    "\1\u0156\1\u0130\7\0\1\u0156\1\0\1\u0156\4\0\2\u0156"+
    "\1\0\1\u0156\11\0\1\u0156\2\0\2\u0156\4\0\1\u0156"+
    "\1\0\4\u0156\3\0\2\u0156\52\0\1\u017b\2\0\1\u017c"+
    "\37\0\1\u017d\67\0\1\u017e\103\0\1\u017f\5\0\1\u0180"+
    "\60\0\1\u0181\5\0\1\u0182\62\0\1\u0183\66\0\1\u0184"+
    "\66\0\1\u0185\44\0\1\u0186\17\0\1\u0187\5\0\1\u0188"+
    "\73\0\1\u0189\16\0\1\u018a\137\0\1\u018b\51\0\1\u018c"+
    "\32\0\1\u018d\104\0\1\u018e\50\0\1\u018f\63\0\1\u018f"+
    "\43\0\1\u0190\45\0\1\u0191\113\0\1\u0192\60\0\1\u0193"+
    "\72\0\1\u0194\2\0\1\u0195\40\0\1\u0196\113\0\1\u0197"+
    "\73\0\1\u0198\52\0\1\u0199\100\0\1\u019a\70\0\1\u019b"+
    "\33\0\1\u019c\53\0\1\u019d\101\0\1\u019e\64\0\1\u019f"+
    "\113\0\1\u01a0\75\0\1\u01a1\62\0\1\u01a2\60\0\1\u0199"+
    "\33\0\1\u01a3\66\0\1\u01a4\131\0\1\u01a5\103\0\1\u01a6"+
    "\66\0\1\u01a7\2\0\1\u01a8\131\0\1\u01a9\23\0\1\u01aa"+
    "\103\0\1\u01ab\66\0\1\u01ac\17\0\1\u01ad\5\0\1\u01ae"+
    "\42\0\1\u01af\111\0\1\u01b0\62\0\1\u01a3\50\0\1\u01b1"+
    "\105\0\1\u01b2\66\0\1\u01b3\65\0\1\u01a4\50\0\1\u01b4"+
    "\46\0\1\u01b5\66\0\1\u01b6\135\0\1\u01b7\1\0\1\u01b8"+
    "\15\0\1\u01b9\135\0\1\u01ba\1\0\1\u01bb\75\0\1\u01bc"+
    "\41\0\1\u01bd\105\0\1\u01be\52\0\1\u01bf\100\0\1\u01c0"+
    "\33\0\1\u01c1\66\0\1\u01c2\114\0\1\u01c3\66\0\1\u01c4"+
    "\65\0\1\u01c5\73\0\1\u01c6\1\0\1\u01c7\101\0\1\u01c8"+
    "\66\0\1\u01c9\51\0\1\u01ca\56\0\1\u01cb\65\0\1\u01cc"+
    "\34\0\1\u01cc\66\0\1\u01cd\120\0\1\u01cd\65\0\1\u01ce"+
    "\5\0\1\u01cf\60\0\1\u01d0\5\0\1\u01d1\73\0\1\u01ce"+
    "\70\0\1\u01d0\33\0\1\u01d2\117\0\1\u01cf\70\0\1\u01d1"+
    "\53\0\1\u01d3\110\0\1\u01d4\44\0\1\u01d5\27\0\1\u01d6"+
    "\135\0\1\u01d7\66\0\1\u01d8\56\0\1\u01d9\77\0\1\u01da"+
    "\70\0\1\u01db\31\0\1\u01dc\66\0\1\u01dd\121\0\1\u01de"+
    "\22\0\1\u01df\131\0\1\u01e0\1\0\1\u01e1\52\0\1\u01e2"+
    "\5\0\1\u01e3\73\0\1\u01e2\66\0\1\u01e3\56\0\1\u01e4"+
    "\26\0\1\u01e5\66\0\1\u01e6\135\0\1\u01e7\1\0\1\u01e8"+
    "\64\0\1\u01e9\1\0\1\u01ea\15\0\1\u01eb\63\0\1\u01eb"+
    "\52\0\1\u01ec\70\0\1\u01ed\20\0\1\u01ee\117\0\1\u01ef"+
    "\5\0\1\u01f0\60\0\1\u01f1\5\0\1\u01f2\73\0\1\u01ef"+
    "\70\0\1\u01f1\64\0\1\u01f0\70\0\1\u01f2\31\0\1\u01f3"+
    "\1\0\1\u01f4\47\0\1\u01f5\66\0\1\u01f6\135\0\1\u01f7"+
    "\1\0\1\u01f8\64\0\1\u01f9\1\0\1\u01fa\52\0\1\u01fb"+
    "\5\0\1\u01fc\60\0\1\u01fd\5\0\1\u01fe\73\0\1\u01ff"+
    "\70\0\1\u0200\64\0\1\u0201\70\0\1\u0202\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21890];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\1\11\10\1\1\11\14\1\1\11"+
    "\1\1\1\0\1\1\10\0\1\11\5\0\1\11\5\0"+
    "\1\1\10\0\1\1\12\0\1\11\5\0\1\1\1\0"+
    "\1\1\3\0\1\1\17\0\2\1\1\0\1\1\1\0"+
    "\2\1\7\0\1\1\2\11\1\0\2\11\1\1\1\11"+
    "\1\0\1\11\2\0\3\11\1\0\1\11\1\0\1\11"+
    "\2\0\2\11\1\0\2\11\2\0\1\1\13\0\1\11"+
    "\2\0\2\11\3\0\1\11\12\0\1\11\2\0\1\11"+
    "\15\0\2\11\1\1\3\0\1\1\7\0\1\11\1\0"+
    "\1\11\1\0\2\11\1\1\1\11\1\0\2\11\2\0"+
    "\2\11\1\1\3\0\1\11\14\0\1\11\3\0\2\11"+
    "\1\0\2\11\2\0\1\11\1\0\2\1\4\0\1\11"+
    "\1\0\1\11\3\0\2\11\5\0\1\1\3\0\1\11"+
    "\2\0\1\11\4\0\2\11\1\0\1\11\1\1\3\0"+
    "\3\11\1\0\1\11\7\0\1\11\4\0\1\11\1\1"+
    "\1\11\7\0\1\11\3\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\3\0\1\11\1\0\1\1\7\0"+
    "\1\1\2\11\4\0\2\11\15\0\2\11\21\0\4\11"+
    "\13\0\1\11\4\0\1\11\4\0\2\11\11\0\2\11"+
    "\4\0\1\11\24\0\1\11\4\0\2\11\7\0\6\11"+
    "\1\0\3\11\10\0\1\11\3\0\2\11\12\0\5\11"+
    "\10\0\10\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[514];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  WasmLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 134: break;
          case 2: 
            { return TINT;
            } 
            // fall through
          case 135: break;
          case 3: 
            { return TDOT;
            } 
            // fall through
          case 136: break;
          case 4: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 137: break;
          case 5: 
            { return TLP;
            } 
            // fall through
          case 138: break;
          case 6: 
            { return TRP;
            } 
            // fall through
          case 139: break;
          case 7: 
            { return TEQUAL;
            } 
            // fall through
          case 140: break;
          case 8: 
            { return TFLOAT;
            } 
            // fall through
          case 141: break;
          case 9: 
            { return TNAME;
            } 
            // fall through
          case 142: break;
          case 10: 
            { return TIF;
            } 
            // fall through
          case 143: break;
          case 11: 
            { return TNE;
            } 
            // fall through
          case 144: break;
          case 12: 
            { return TID;
            } 
            // fall through
          case 145: break;
          case 13: 
            { return TOR;
            } 
            // fall through
          case 146: break;
          case 14: 
            { return TLT;
            } 
            // fall through
          case 147: break;
          case 15: 
            { return TLE;
            } 
            // fall through
          case 148: break;
          case 16: 
            { return TEQ;
            } 
            // fall through
          case 149: break;
          case 17: 
            { return TBR;
            } 
            // fall through
          case 150: break;
          case 18: 
            { return TGT;
            } 
            // fall through
          case 151: break;
          case 19: 
            { return TGE;
            } 
            // fall through
          case 152: break;
          case 20: 
            { return TXOR;
            } 
            // fall through
          case 153: break;
          case 21: 
            { return TI32;
            } 
            // fall through
          case 154: break;
          case 22: 
            { return TI64;
            } 
            // fall through
          case 155: break;
          case 23: 
            { return TNOP;
            } 
            // fall through
          case 156: break;
          case 24: 
            { return TNEG;
            } 
            // fall through
          case 157: break;
          case 25: 
            { return TF32;
            } 
            // fall through
          case 158: break;
          case 26: 
            { return TF64;
            } 
            // fall through
          case 159: break;
          case 27: 
            { return TAND;
            } 
            // fall through
          case 160: break;
          case 28: 
            { return TADD;
            } 
            // fall through
          case 161: break;
          case 29: 
            { return TABS;
            } 
            // fall through
          case 162: break;
          case 30: 
            { return TMIN;
            } 
            // fall through
          case 163: break;
          case 31: 
            { return TMAX;
            } 
            // fall through
          case 164: break;
          case 32: 
            { return TMUT;
            } 
            // fall through
          case 165: break;
          case 33: 
            { return TMUL;
            } 
            // fall through
          case 166: break;
          case 34: 
            { return TDIV;
            } 
            // fall through
          case 167: break;
          case 35: 
            { return TEND;
            } 
            // fall through
          case 168: break;
          case 36: 
            { return TEQZ;
            } 
            // fall through
          case 169: break;
          case 37: 
            { return TCTZ;
            } 
            // fall through
          case 170: break;
          case 38: 
            { return TCLZ;
            } 
            // fall through
          case 171: break;
          case 39: 
            { return TSUB;
            } 
            // fall through
          case 172: break;
          case 40: 
            { return TSHL;
            } 
            // fall through
          case 173: break;
          case 41: 
            { return TTYPE;
            } 
            // fall through
          case 174: break;
          case 42: 
            { return TTHEN;
            } 
            // fall through
          case 175: break;
          case 43: 
            { return TFUNC;
            } 
            // fall through
          case 176: break;
          case 44: 
            { return TDATA;
            } 
            // fall through
          case 177: break;
          case 45: 
            { return TDROP;
            } 
            // fall through
          case 178: break;
          case 46: 
            { return TLT_U;
            } 
            // fall through
          case 179: break;
          case 47: 
            { return TLT_S;
            } 
            // fall through
          case 180: break;
          case 48: 
            { return TLOAD;
            } 
            // fall through
          case 181: break;
          case 49: 
            { return TLOOP;
            } 
            // fall through
          case 182: break;
          case 50: 
            { return TLE_U;
            } 
            // fall through
          case 183: break;
          case 51: 
            { return TLE_S;
            } 
            // fall through
          case 184: break;
          case 52: 
            { return TELEM;
            } 
            // fall through
          case 185: break;
          case 53: 
            { return TELSE;
            } 
            // fall through
          case 186: break;
          case 54: 
            { return TCALL;
            } 
            // fall through
          case 187: break;
          case 55: 
            { return TCEIL;
            } 
            // fall through
          case 188: break;
          case 56: 
            { return TSQRT;
            } 
            // fall through
          case 189: break;
          case 57: 
            { return TGT_U;
            } 
            // fall through
          case 190: break;
          case 58: 
            { return TGT_S;
            } 
            // fall through
          case 191: break;
          case 59: 
            { return TGE_U;
            } 
            // fall through
          case 192: break;
          case 60: 
            { return TGE_S;
            } 
            // fall through
          case 193: break;
          case 61: 
            { return TTABLE;
            } 
            // fall through
          case 194: break;
          case 62: 
            { return TTRUNC;
            } 
            // fall through
          case 195: break;
          case 63: 
            { return TFLOOR;
            } 
            // fall through
          case 196: break;
          case 64: 
            { return TALIGN;
            } 
            // fall through
          case 197: break;
          case 65: 
            { return TDIV_U;
            } 
            // fall through
          case 198: break;
          case 66: 
            { return TDIV_S;
            } 
            // fall through
          case 199: break;
          case 67: 
            { return TLOCAL;
            } 
            // fall through
          case 200: break;
          case 68: 
            { return TCONST;
            } 
            // fall through
          case 201: break;
          case 69: 
            { return TPARAM;
            } 
            // fall through
          case 202: break;
          case 70: 
            { return TREM_U;
            } 
            // fall through
          case 203: break;
          case 71: 
            { return TREM_S;
            } 
            // fall through
          case 204: break;
          case 72: 
            { return TSTART;
            } 
            // fall through
          case 205: break;
          case 73: 
            { return TSTORE;
            } 
            // fall through
          case 206: break;
          case 74: 
            { return TSHR_U;
            } 
            // fall through
          case 207: break;
          case 75: 
            { return TSHR_S;
            } 
            // fall through
          case 208: break;
          case 76: 
            { return TBLOCK;
            } 
            // fall through
          case 209: break;
          case 77: 
            { return TBR_IF;
            } 
            // fall through
          case 210: break;
          case 78: 
            { return TIMPORT;
            } 
            // fall through
          case 211: break;
          case 79: 
            { return TMODULE;
            } 
            // fall through
          case 212: break;
          case 80: 
            { return TMEMORY;
            } 
            // fall through
          case 213: break;
          case 81: 
            { return TOFFSET;
            } 
            // fall through
          case 214: break;
          case 82: 
            { return TEXPORT;
            } 
            // fall through
          case 215: break;
          case 83: 
            { return TPOPCNT;
            } 
            // fall through
          case 216: break;
          case 84: 
            { return TRETURN;
            } 
            // fall through
          case 217: break;
          case 85: 
            { return TRESULT;
            } 
            // fall through
          case 218: break;
          case 86: 
            { return TSTORE8;
            } 
            // fall through
          case 219: break;
          case 87: 
            { return TSELECT;
            } 
            // fall through
          case 220: break;
          case 88: 
            { return TGLOBAL;
            } 
            // fall through
          case 221: break;
          case 89: 
            { return TNEAREST;
            } 
            // fall through
          case 222: break;
          case 90: 
            { return TFUNCREF;
            } 
            // fall through
          case 223: break;
          case 91: 
            { return TLOAD8_U;
            } 
            // fall through
          case 224: break;
          case 92: 
            { return TLOAD8_S;
            } 
            // fall through
          case 225: break;
          case 93: 
            { return TSTORE32;
            } 
            // fall through
          case 226: break;
          case 94: 
            { return TSTORE16;
            } 
            // fall through
          case 227: break;
          case 95: 
            { return TLOAD32_U;
            } 
            // fall through
          case 228: break;
          case 96: 
            { return TLOAD32_S;
            } 
            // fall through
          case 229: break;
          case 97: 
            { return TLOAD16_U;
            } 
            // fall through
          case 230: break;
          case 98: 
            { return TLOAD16_S;
            } 
            // fall through
          case 231: break;
          case 99: 
            { return TCOPYSIGN;
            } 
            // fall through
          case 232: break;
          case 100: 
            { return TBR_TABLE;
            } 
            // fall through
          case 233: break;
          case 101: 
            { return TWRAP_I64;
            } 
            // fall through
          case 234: break;
          case 102: 
            { return TTEE_GLOBAL;
            } 
            // fall through
          case 235: break;
          case 103: 
            { return TSET_LOCAL;
            } 
            // fall through
          case 236: break;
          case 104: 
            { return TGET_LOCAL;
            } 
            // fall through
          case 237: break;
          case 105: 
            { return TEXTEND8_S;
            } 
            // fall through
          case 238: break;
          case 106: 
            { return TDEMOTE_F64;
            } 
            // fall through
          case 239: break;
          case 107: 
            { return TEXTEND32_S;
            } 
            // fall through
          case 240: break;
          case 108: 
            { return TEXTEND16_S;
            } 
            // fall through
          case 241: break;
          case 109: 
            { return TSET_GLOBAL;
            } 
            // fall through
          case 242: break;
          case 110: 
            { return TGET_GLOBAL;
            } 
            // fall through
          case 243: break;
          case 111: 
            { return TTRUNC_U_F32;
            } 
            // fall through
          case 244: break;
          case 112: 
            { return TTRUNC_S_F32;
            } 
            // fall through
          case 245: break;
          case 113: 
            { return TTRUNC_U_F64;
            } 
            // fall through
          case 246: break;
          case 114: 
            { return TTRUNC_S_F64;
            } 
            // fall through
          case 247: break;
          case 115: 
            { return TSIZE;
            } 
            // fall through
          case 248: break;
          case 116: 
            { return TGROW;
            } 
            // fall through
          case 249: break;
          case 117: 
            { return TUNREACHABLE;
            } 
            // fall through
          case 250: break;
          case 118: 
            { return TPROMOTE_F32;
            } 
            // fall through
          case 251: break;
          case 119: 
            { return TEXTEND_U_I32;
            } 
            // fall through
          case 252: break;
          case 120: 
            { return TEXTEND_S_I32;
            } 
            // fall through
          case 253: break;
          case 121: 
            { return TCALL_INDIRECT;
            } 
            // fall through
          case 254: break;
          case 122: 
            { return TCONVERT_U_I32;
            } 
            // fall through
          case 255: break;
          case 123: 
            { return TCONVERT_S_I32;
            } 
            // fall through
          case 256: break;
          case 124: 
            { return TCONVERT_U_I64;
            } 
            // fall through
          case 257: break;
          case 125: 
            { return TCONVERT_S_I64;
            } 
            // fall through
          case 258: break;
          case 126: 
            { return TTRUNC_SAT_F32_U;
            } 
            // fall through
          case 259: break;
          case 127: 
            { return TTRUNC_SAT_F32_S;
            } 
            // fall through
          case 260: break;
          case 128: 
            { return TTRUNC_SAT_F64_U;
            } 
            // fall through
          case 261: break;
          case 129: 
            { return TTRUNC_SAT_F64_S;
            } 
            // fall through
          case 262: break;
          case 130: 
            { return TREINTERPRET_I32;
            } 
            // fall through
          case 263: break;
          case 131: 
            { return TREINTERPRET_I64;
            } 
            // fall through
          case 264: break;
          case 132: 
            { return TREINTERPRET_F32;
            } 
            // fall through
          case 265: break;
          case 133: 
            { return TREINTERPRET_F64;
            } 
            // fall through
          case 266: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
