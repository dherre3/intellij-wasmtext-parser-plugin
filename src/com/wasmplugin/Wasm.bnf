{
    parserClass="com.wasmplugin.parser.WasmParser"
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Wasm"
    psiImplClassSuffix="Impl"
    psiPackage="com.wasmplugin.psi"
    psiImplPackage="com.wasmplugin.psi.impl"

    elementTypeHolderClass="com.wasmplugin.psi.WasmTypes"
    elementTypeClass="com.wasmplugin.psi.WasmElementType"
    tokenTypeClass="com.wasmplugin.psi.WasmTokenType"
//    tokens=[
//        TLP="("
//         TRP")"
//        TMODULE="module"
//
//        TID="regexp:\$([0-9]|[a-z]|[A-Z]|[!]  |[_]|  [#]  |  [$]  |  [%]  |  [&]  |  [′]  |  [∗]  |  [+]  |  [−]  |  [.]  | [/] | [:]  |  [<]  |  [=]  |  [>]  |  [?]  |  [@]  |  [∖]  |  [’]  |  [_]  |  [`]  |  [|]  |[~])+"
//        TINT"regexp:[+\-]?([1-9][0-9]+|[0-9])"
//        TFUNC="func"
//        TPARAM="param"
//        TI32="i32"
//        TI64="i32"
//        TF32="f32"
//        TF64="f64"
//        TDOT="."
//        TREINTERPRET_I64="reinterpret/i64"
//        TCONST="const"
//        TGET_GLOBAL="get_global"
//        TRESULT="result"
//        TGLOBAL="global"
//        TTABLE="table"
//        TMUT="mut"
//        TANYFUNC="anyfunc"
//        space='regexp:\s+'
//        comment='regexp:;;[^\n]+\n'
//        TNAME="regexp:\"[^\"\n]*\""
//        TELEM="elem"
//        TIMPORT="import"
//        TTYPE="type"
//        TMEMORY="memory"
//        TEXPORT="export"
//        TSTART="start"
//        TDATA="data"
//        TOFFSET="offset"
//        TLOCAL="local"



//    ]
}

module ::= TLP TMODULE TID? module_field* TRP| module_field*

private module_field ::=       type
                             | import
                             | table
                             | memory
                             | global
                             | export
                             | element
                             | data
                             | start
                             | func
private expression::=instruction*

func::= TLP TFUNC TID? export_short* type_use local* instruction* TRP
        | TLP TFUNC TID? export_short* import_short* type_use TRP

value_type::= TI32|TF64|TF32|TI64
//
type_use::= TLP TTYPE idx TRP abbr_type_use
        |   abbr_type_use

abbr_type_use ::=  param_list* result*
//
idx::=  TINT|TID
//
table_type::= limits elem_type

num::= TFLOAT | TINT

limits::=   TINT TINT?

elem_type::= TFUNCREF

memory_type::= limits

global_type::= value_type | TLP TMUT value_type TRP

type::= TLP TTYPE TID? func_type TRP
func_type::= TLP TFUNC param_list* result* TRP
param_list::=  param_abbreviated
              |param_explicit

param_abbreviated ::= TLP TPARAM value_type* TRP
param_explicit::=TLP TPARAM TID? value_type TRP

result::=   TLP TRESULT  value_type* TRP

local::=   TLP TLOCAL  TID? value_type TRP
        | TLP TLOCAL value_type* TRP

import ::= TLP TIMPORT TNAME TNAME import_desc TRP

import_desc ::= TLP TFUNC TID? type_use TRP
            | TLP TTABLE TID? table_type TRP
            | TLP TMEMORY TID? memory_type TRP
            | TLP TGLOBAL TID? global_type TRP

table::=  TLP TTABLE TID? table_type TRP
        | TLP TTABLE TID? elem_type elem_short TRP
        | TLP TTABLE TID? import_short table_type  TRP
        | TLP TTABLE TID? export_short+ import_short* table_type  TRP


import_short::= TLP TIMPORT TNAME TNAME TRP
export_short::= TLP TEXPORT TNAME TRP
elem_short ::= TLP TELEM idx* TRP
//
memory::= TLP TMEMORY TID? data_short TRP
        | TLP TMEMORY TID? export_short* import_short* memory_type TRP

data_short::= TLP TDATA TNAME TRP

global::= TLP TGLOBAL TID? global_type   expression  TRP
        | TLP TGLOBAL TID? import_short global_type TRP
        | TLP TGLOBAL TID? export_short+ import_short* TRP

export::= TLP TEXPORT TNAME export_desc TRP
export_desc::= TLP (TFUNC|TMEMORY|TTABLE|TGLOBAL) idx TRP
//
start::= TLP TSTART idx TRP
//
element::=  TLP TELEM idx? offset_abbrv idx*  TRP

offset_abbrv::=TLP TOFFSET? expression TRP | expression
//
data::= TLP TDATA idx? offset_abbrv TNAME TRP

//instruction::= value_type DOT CONST ()

instruction::= block_instruction | plain_instruction | folded_instruction

mem_arg::= offset_arg? align_arg?

offset_arg::=  TOFFSET  TEQUAL TINT
align_arg::= TALIGN  TEQUAL TINT

private block_instruction::=    TBLOCK TID? result? instruction* TEND TID?
                    |   TLOOP TID? result? instruction* TEND TID?
                    |   TIF TID? result? instruction* else_clause? TEND TID?
private else_clause::= TELSE TID? instruction*
                    // Control Instructions
private folded_instruction ::=  TLP plain_instruction folded_instruction* TRP
                    |   TLP TBLOCK TID? result? instruction* TRP
                    |   TLP TLOOP TID? result? instruction* TRP
                    |   TLP TIF TID? result? folded_instruction* TLP TTHEN instruction*  TRP else_clause_folded? TRP

private else_clause_folded::=  TLP TTHEN instruction* TRP

private plain_instruction::=   TUNREACHABLE
                    |  TNOP
                    |   TBR idx
                    |   TBR_IF idx
                    |   TBR_TABLE idx+
                    |   TRETURN 
                    |   TCALL idx
                    |   TCALL_INDIRECT type_use // TODO(dherre3): Verify that not identifier is bound to the parameters.
                    // Parametric Instructions
                    |   TDROP
                    |   TSELECT
                    |   TGET_LOCAL idx
                    |   TSET_LOCAL idx
                    |   TGET_GLOBAL idx
                    |   TSET_GLOBAL idx
                    |   TTEE_GLOBAL idx
                    // Memory Instructions
                    |   TI32 TDOT TLOAD mem_arg
                    |   TI64 TDOT TLOAD mem_arg
                    |   TF32 TDOT TLOAD mem_arg
                    |   TF64 TDOT TLOAD mem_arg
                    |   TI32 TDOT TLOAD8_S mem_arg
                    |   TI32 TDOT TLOAD8_U mem_arg
                    |   TI32 TDOT TLOAD16_S mem_arg
                    |   TI32 TDOT TLOAD16_U mem_arg
                    |   TI64 TDOT TLOAD8_S mem_arg
                    |   TI64 TDOT TLOAD8_U mem_arg
                    |   TI64 TDOT TLOAD16_S mem_arg
                    |   TI64 TDOT TLOAD16_U mem_arg
                    |   TI64 TDOT TLOAD32_S mem_arg
                    |   TI64 TDOT TLOAD32_U mem_arg
                    |   TI32 TDOT TSTORE mem_arg
                    |   TI64 TDOT TSTORE mem_arg
                    |   TF32 TDOT TSTORE mem_arg
                    |   TF64 TDOT TSTORE mem_arg
                    |   TI32 TDOT TSTORE8 mem_arg
                    |   TI32 TDOT TSTORE16 mem_arg
                    |   TI64 TDOT TSTORE8 mem_arg
                    |   TI64 TDOT TSTORE16 mem_arg
                    |   TI64 TDOT TSTORE32 mem_arg
                    |   TSIZE
                    |   TGROW
                    //      Numeric instructions
                    // const
                    |   TI32 TDOT TCONST TINT
                    |   TI64 TDOT TCONST TINT
                    |   TF32 TDOT TCONST num
                    |   TF64 TDOT TCONST num
                    // i32 ops
                    |   TI32 TDOT TCLZ
                    |   TI32 TDOT TCTZ
                    |   TI32 TDOT TPOPCNT
                    |   TI32 TDOT TADD
                    |   TI32 TDOT TMUL
                    |   TI32 TDOT TSUB
                    |   TI32 TDOT TDIV_S
                    |   TI32 TDOT TDIV_U
                    |   TI32 TDOT TREM_S
                    |   TI32 TDOT TREM_U
                    |   TI32 TDOT TAND
                    |   TI32 TDOT TOR
                    |   TI32 TDOT TXOR
                    |   TI32 TDOT TSHL
                    |   TI32 TDOT TSHR_S
                    |   TI32 TDOT TSHR_U
                    |   TI32 TDOT TROTL
                    |   TI32 TDOT TROTR
                    // i64 ops
                    |   TI64 TDOT TCLZ
                    |   TI64 TDOT TCTZ
                    |   TI64 TDOT TPOPCNT
                    |   TI64 TDOT TADD
                    |   TI64 TDOT TMUL
                    |   TI64 TDOT TSUB
                    |   TI64 TDOT TDIV_S
                    |   TI64 TDOT TDIV_U
                    |   TI64 TDOT TREM_S
                    |   TI64 TDOT TREM_U
                    |   TI64 TDOT TAND
                    |   TI64 TDOT TOR
                    |   TI64 TDOT TXOR
                    |   TI64 TDOT TSHL
                    |   TI64 TDOT TSHR_S
                    |   TI64 TDOT TSHR_U
                    |   TI64 TDOT TROTL
                    |   TI64 TDOT TROTR
                    // f32 opts
                    |   TF32 TDOT TABS
                    |   TF32 TDOT TNEG
                    |   TF32 TDOT TCEIL
                    |   TF32 TDOT TFLOOR
                    |   TF32 TDOT TTRUNC
                    |   TF32 TDOT TNEAREST
                    |   TF32 TDOT TSQRT
                    |   TF32 TDOT TADD
                    |   TF32 TDOT TSUB
                    |   TF32 TDOT TMUL
                    |   TF32 TDOT TDIV
                    |   TF32 TDOT TMIN
                    |   TF32 TDOT TMAX
                    |   TF32 TDOT TCOPYSIGN
                    // f64.opts
                    |   TF64 TDOT TABS
                    |   TF64 TDOT TNEG
                    |   TF64 TDOT TCEIL
                    |   TF64 TDOT TFLOOR
                    |   TF64 TDOT TTRUNC
                    |   TF64 TDOT TNEAREST
                    |   TF64 TDOT TSQRT
                    |   TF64 TDOT TADD
                    |   TF64 TDOT TSUB
                    |   TF64 TDOT TMUL
                    |   TF64 TDOT TDIV
                    |   TF64 TDOT TMIN
                    |   TF64 TDOT TMAX
                    |   TF64 TDOT TCOPYSIGN
                    //
                    |   TI32 TDOT  TEQZ
                    |   TI32 TDOT TEQ
                    |   TI32 TDOT TNE
                    |   TI32 TDOT TLT_S
                    |   TI32 TDOT TLT_U
                    |   TI32 TDOT TGT_S
                    |   TI32 TDOT TGT_U
                    |   TI32 TDOT TLE_S
                    |   TI32 TDOT TLE_U
                    |   TI32 TDOT TGE_S
                    |   TI32 TDOT TGE_U
                    //
                    |   TI64 TDOT  TEQZ
                    |   TI64 TDOT TEQ
                    |   TI64 TDOT TNE
                    |   TI64 TDOT TLT_S
                    |   TI64 TDOT TLT_U
                    |   TI64 TDOT TGT_S
                    |   TI64 TDOT TGT_U
                    |   TI64 TDOT TLE_U
                    |   TI64 TDOT TLE_S
                    |   TI64 TDOT TGE_S
                    |   TI64 TDOT TGE_U
                    //
                    |   TF32 TDOT TEQ
                    |   TF32 TDOT TNE
                    |   TF32 TDOT TLT
                    |   TF32 TDOT TGT
                    |   TF32 TDOT TLE
                    |   TF32 TDOT TGE
                    //
                    |   TF64 TDOT TEQ
                    |   TF64 TDOT TNE
                    |   TF64 TDOT TLT
                    |   TF64 TDOT TGT
                    |   TF64 TDOT TLE
                    |   TF64 TDOT TGE
                    //
                    |   TI32 TDOT TWRAP_I64
                    |   TI32 TDOT TTRUNC_S_F32
                    |   TI32 TDOT TTRUNC_U_F32
                    |   TI32 TDOT TTRUNC_S_F64
                    |   TI32 TDOT TTRUNC_U_F64
                    |   TI32 TDOT TTRUNC_SAT_F32_U
                    |   TI32 TDOT TTRUNC_SAT_F32_S
                    |   TI32 TDOT TTRUNC_SAT_F64_U
                    |   TI32 TDOT TTRUNC_SAT_F64_S
                    |   TI32 TDOT TEXTEND8_S
                    |   TI32 TDOT TEXTEND16_S
                    |   TI64 TDOT TEXTEND_S_I32
                    |   TI64 TDOT TEXTEND_U_I32
                    |   TI64 TDOT TEXTEND8_S
                    |   TI64 TDOT TEXTEND16_S
                    |   TI64 TDOT TEXTEND32_S
                    |   TI64 TDOT TTRUNC_S_F32
                    |   TI64 TDOT TTRUNC_U_F32
                    |   TI64 TDOT TTRUNC_S_F64
                    |   TI64 TDOT TTRUNC_U_F64
                    |   TI64 TDOT TTRUNC_SAT_F32_U
                    |   TI64 TDOT TTRUNC_SAT_F32_S
                    |   TI64 TDOT TTRUNC_SAT_F64_U
                    |   TI64 TDOT TTRUNC_SAT_F64_S
                    |   TF32 TDOT TCONVERT_S_I32
                    |   TF32 TDOT TCONVERT_U_I32
                    |   TF32 TDOT TCONVERT_S_I64
                    |   TF32 TDOT TCONVERT_U_I64
                    |   TF32 TDOT TDEMOTE_F64
                    |   TF64 TDOT TCONVERT_S_I32
                    |   TF64 TDOT TCONVERT_U_I32
                    |   TF64 TDOT TCONVERT_S_I64
                    |   TF64 TDOT TCONVERT_U_I64
                    |   TF64 TDOT TPROMOTE_F32
                    |   TI32 TDOT TREINTERPRET_F32
                    |   TI64 TDOT TREINTERPRET_F64
                    |   TF32 TDOT TREINTERPRET_I32
                    |   TF64 TDOT TREINTERPRET_I64

BLOCK_COMMENT | LINE_COMMENT
